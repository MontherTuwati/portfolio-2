'use client'; // This layout uses client-side hooks and event listeners
// Include imports for Lenis
import React, { useEffect, useRef, useState } from 'react';
import Lenis from '@studio-freight/lenis';
import Image from "next/image";
import { usePathname } from 'next/navigation';
// Import the Link component from next/link
import Link from 'next/link';
import { Geist, Geist_Mono } from "next/font/google";
import "./globals.css";
import { gilroy } from "@/fonts/fonts";
import Navbar from '@/components/Navbar';

// Define social media links and placeholder icon paths
const socialLinks = [
  { platform: "GitHub", href: "https://github.com/monthertuwati", iconPath: "/icons/github_icon.svg" }, // <-- Replace YOUR_GITHUB_LINK and icon path
  { platform: "LinkedIn", href: "https://www.linkedin.com/in/monthertuwati/", iconPath: "/icons/linkedin_icon.svg" }, // <-- Replace YOUR_LINKEDIN_LINK and icon path
  { platform: "Gmail", href: "mailto:monthertuwati@gmail.com", iconPath: "/icons/gmail_icon.svg" }, // <-- Replace YOUR_EMAIL_ADDRESS and icon path
];


const geistSans = Geist({
  variable: "--font-geist-sans",
  subsets: ["latin"],
});

const geistMono = Geist_Mono({
  variable: "--font-geist-mono",
  subsets: ["latin"],
});

// Metadata is for server components, so it stays outside the client component export
// It should ideally be in a separate metadata.ts file in App Router client components
// Keeping it commented out as in your provided code.
/*
  // app/metadata.ts
  import type { Metadata } from 'next';

  export const metadata: Metadata = {
    title: "Create Next App",
    description: "Generated by create next app",
  };
*/


export default function RootLayout({
  children,
}: Readonly<{
  children: React.ReactNode;
}>) {
  // State for mobile menu (moved from page.tsx)
  const [mobileMenuOpen, setMobileMenuOpen] = useState(false);
  // Get current pathname
  const pathname = usePathname();

  // --- Lenis Smooth Scrolling Implementation ---
  // Use useRef to hold the Lenis instance
  const lenis = useRef<Lenis | null>(null);

  useEffect(() => {
    // Initialize Lenis only in the browser environment
    if (typeof window !== 'undefined') {
      lenis.current = new Lenis({
        duration: 1.2, // Adjust the duration for scroll speed (seconds)
        easing: (t) => Math.min(1, 1.001 - Math.pow(2, -10 * t)), // Easing function (default lenis easing)
        smoothWheel: true, // Enable smooth scrolling for mouse wheel
        // wheelMultiplier: 1, // Adjust scroll speed sensitivity
        // touchMultiplier: 1,
        // infinite: false, // Set to true for infinite looping scrolling
        // autoResize: true, // Automatically handle window resizing
      });

      // This function updates Lenis on each frame using requestAnimationFrame
      function raf(time: number) {
        lenis.current?.raf(time);
        requestAnimationFrame(raf);
      }

      // Start the animation loop
      requestAnimationFrame(raf);

      // Clean up the Lenis instance when the component unmounts
      return () => {
        lenis.current?.destroy();
      };
    }
  }, []); // Empty dependency array ensures this effect runs only once on mount and cleans up on unmount
  // --- End Lenis Implementation ---

  return (
    <html lang="en">
      <body
        // Added bg-black class for black background
        className={`${geistSans.variable} ${geistMono.variable} ${gilroy.variable} antialiased font-gilroy bg-black`}
        >
        {/* Header Section */}
        <Navbar />
        {children} {/* This is where your page content (like page.tsx) will be rendered */}

        {/* Sticky Social Media Container */}
        {/* Positioned fixed to the bottom right */}
        {/* Added responsive padding, rounded corners, border, and background */}
        <div className="fixed bottom-4 right-4 md:bottom-8 md:right-8 z-50 bg-black/60 border border-white/[.30] border-dashed rounded-full p-2 md:p-4 flex flex-col items-center space-y-7 md:space-y-5">
          {socialLinks.map((link) => (
            // Link for each social media icon
            <Link
              key={link.platform}
              href={link.href}
              target="_blank" // Open link in new tab
              rel="noopener noreferrer" // Security best practice for target="_blank"
              // Added hover effects
              className="transition-transform duration-200 hover:scale-110"
            >
              {/* Social media icon image */}
              <Image
                src={link.iconPath} // Use the icon path from the socialLinks array
                alt={`${link.platform} icon`}
                // Adjusted icon size responsively
                width={20} // Base size for mobile
                height={20} // Base size for mobile
                className="w-5 h-5 sm:w-6 sm:h-6 md:w-7 md:h-7 object-contain" // Responsive size and object-contain
              />
            </Link>
          ))}
        </div>
        {/* End Sticky Social Media Container */}
      </body>
    </html>
  );
}
